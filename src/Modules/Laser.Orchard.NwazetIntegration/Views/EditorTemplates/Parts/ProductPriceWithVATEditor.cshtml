@using Laser.Orchard.NwazetIntegration.ViewModels;
@using System.Globalization;
@model ProductPriceEditorViewModel
@{ 
    var hintText = string.IsNullOrWhiteSpace(Model.DefaultTerritoryName)
        ? T("Base prices are computed using VAT __RATE__% from the selected category.").Text
        : T("Base prices are computed using VAT __RATE__% from the selected category and for the selected default region ({0}).", Model.DefaultTerritoryName).Text;

    var beforeVatText = T("Before VAT: __PRICE__");

    var initialRate = Model.VatRates[Model.DefaultVatConfigurationId];
    if (Model.SelectedVatConfigurationId > 0) {
        initialRate = Model.VatRates[Model.SelectedVatConfigurationId];
    }

    var guidBase = Guid.NewGuid().ToString();
    var regularFieldsetGuid = "rf" + guidBase;
    var regularTaxableGuid = "rt" + guidBase;
    var regularTaxedGuid = "rv" + guidBase;
    var discountFieldsetGuid = "df" + guidBase;
    var discountTaxableGuid = "dt" + guidBase;
    var discountTaxedGuid = "dv" + guidBase;
    var hintGuid = "hint" + guidBase;

    //var currentCulture = CultureInfo.GetCultureInfo(WorkContext.CurrentCulture);
    var decimalSeparator = CultureInfo.CurrentUICulture.NumberFormat.CurrencyDecimalSeparator;
}
<fieldset>
    <small class="form-text text-muted">
        @T("Edit the prices after tax.")
    </small>
    <fieldset id="@regularFieldsetGuid">
        <div class="form-group">
            <label>@T("Regular price (after VAT)")</label>
            <input class="form-control"
                   type="text"
                   id="@regularTaxedGuid"
                   value="@(Model.BaseTaxedPrice)">

            <small class="form-text text-muted" id="@regularTaxableGuid">
                
            </small>
        </div>
    </fieldset>
    <fieldset id="@discountFieldsetGuid">
        <div class="form-group">
            <label>@T("Discounted Price (after VAT)")</label>
            <input class="form-control"
                   type="text"
                   id="@discountTaxedGuid"
                   value="@(Model.DiscountPrice >= 0.0m ? Model.DiscountTaxedPrice.ToString() : "")">

            <small class="form-text text-muted" id="@discountTaxableGuid">

            </small>
        </div>
    </fieldset>
    <small class="form-text text-muted" id="@hintGuid">

    </small>
</fieldset>

@using(Script.Foot()) {

<script type="text/javascript">
        var hintBaseText = "@hintText";
        var priceBaseText = "@beforeVatText";
        var rates = {};

        @foreach(var config in Model.VatRates) {
            <text>rates[@config.Key] = @config.Value.ToString(CultureInfo.InvariantCulture);</text>
        }

        // initial values
        var rate = @initialRate.ToString(CultureInfo.InvariantCulture);
        // dropdown where we select the vat configuration
        var vatConfigDropDown = $('#ProductVatConfigurationPart_VatConfigurationId');
        // "original" price element
        var originalPrice = $('#NwazetCommerceProduct_Product_Price');
        // "original" discount element
        var discountPrice = $('#NwazetCommerceProduct_DiscountPrice');
        // element to update the information on the selected VAT rate
        var hintElement = $('#@hintGuid');
        // regular price inputs
        var regularBasePrice = $('#@regularTaxableGuid');
        var regularTaxedPrice = $('#@regularTaxedGuid');
        // discount price inputs
        var discountBasePrice = $('#@discountTaxableGuid');
        var discountTaxedPrice = $('#@discountTaxedGuid');

        // hide original prices and their labels
        originalPrice.hide();
        $('label[for="NwazetCommerceProduct_Product_Price"]').hide()
        discountPrice.hide();
        $('label[for="NwazetCommerceProduct_DiscountPrice"]').hide()

        function UpdateHint() {
            var hintText = hintBaseText.replace('__RATE__', rate*100.0);
            // Set hint text
            hintElement.text(hintText);
        }

        function TestIsFloat(value) {
            return !isNaN(value - parseFloat(value));
        }

        function ComputTaxable(value) {
            return value / (1.0 + rate);
            // Total price is taxable + vat
            // t = p + v => p = t - v
            // vat is taxable * rate
            // v = p * r => p = v / r
            // => t = v + v / r = v * (1 + 1 / r)
            // => v = t / (1 + 1 / r)
            // Then we get the actual vat by rounding at the second
            // decimal, and finally compute p as t-v
            //var vat = value / (1.0 + (1.0 / rate));
            //return (value - (Math.round(vat*100.0)/100.0)).toFixed(2);
        }

        function UpdateRegularPrices() {
            // regular prices
            var tPrice = regularTaxedPrice.val();
            if (TestIsFloat(tPrice)) {

                var value = ComputTaxable(parseFloat(tPrice));
                var v = value.toString().replace('.', '@decimalSeparator');
                regularBasePrice.text(priceBaseText.replace('__PRICE__', v));
                originalPrice.val(v);
            }
        }

        function UpdateDiscountedPrices() {
            // discounted prices
            var tPrice = discountTaxedPrice.val();
            if (TestIsFloat(tPrice)) {
                var value = ComputTaxable(parseFloat(tPrice));
                if (value < 0) {
                    discountBasePrice.text('');
                    discountPrice.val('');
                } else {
                    var v = value.toString().replace('.', '@decimalSeparator');
                    discountBasePrice.text(priceBaseText.replace('__PRICE__', v));
                    discountPrice.val(v);
                }
            } else {
                discountBasePrice.text('');
                discountPrice.val('');
            }
        }

        function UpdateBasePrices() {
            // regular prices
            UpdateRegularPrices()
            // discounted prices
            UpdateDiscountedPrices()
        }

        vatConfigDropDown.on('change', function () {
            // currently selected vat config
            rate = rates[$this.val()];
            // recompute prices before tax
            UpdateBasePrices()
            // re update hint text
            UpdateHint();
        });
        regularTaxedPrice.on('change', function () {
            // recompute prices before tax
            UpdateRegularPrices()
        });
        discountTaxedPrice.on('change', function () {
            // recompute prices before tax
            UpdateDiscountedPrices()
        });

        regularBasePrice.text(priceBaseText.replace('__PRICE__', @Model.BasePrice));
        @if(Model.DiscountPrice >= 0) {
            <text>discountBasePrice.text(priceBaseText.replace('__PRICE__', @Model.DiscountPrice));</text>
        }
        UpdateHint();
</script>
}