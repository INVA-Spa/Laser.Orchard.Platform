@using Laser.Orchard.NwazetIntegration.ViewModels;
@using Orchard.Localization;
@using System.Linq.Expressions;
@using Laser.Orchard.NwazetIntegration.Models;

@model Laser.Orchard.NwazetIntegration.ViewModels.AddressEditViewModel
@functions{
    string fullPrefix;
}
@{

    Script.Require("NwazetIntegration.AddressConfiguration").AtFoot();
    Style.Require("NwazetIntegration.Admin");

    var addressTypeTitle = Model.AddressType == AddressRecordType.ShippingAddress
        ? T("Shipping Address").Text
        : T("Billing Address").Text;

    var otherElementSelector = (string)ViewData["OtherElementSelector"];
    var otherPrefix = (string)ViewData["OtherPrefix"];
    fullPrefix = otherPrefix + "_Order_"
        + (Model.AddressType == AddressRecordType.ShippingAddress
            ? "ShippingAddress_" // map to the correctobject within OrderPart
            : "BillingAddress_");

    var guid = Guid.NewGuid().ToString();
}
@helper EditorForString(
    Expression<Func<AddressEditViewModel, string>> property,
    LocalizedString label = null,
    LocalizedString hint = null,
    bool required = false,
    LocalizedString placeholder = null) {
    var titleAttribute = hint != null ? string.Format(@"title=""{0}""", hint.Text) : "";
    <div class="address-input address-text-input" @Html.Raw(titleAttribute)>
        @if (label != null) {
            if (required) {
                @Html.LabelFor(property, label.Text, new { @class = "required" })
            } else {
                @Html.LabelFor(property, label.Text, new { })
            }
        }
        <input id="@Html.FieldIdFor(property)"
               class="@(required ? "required" : "")"
               name="@Html.NameFor(property)" type="text"
               value="@property.Compile()(Model)"
               placeholder="@(placeholder != null ? placeholder.Text : "")" />
        @if (hint != null) {
            <div class="hint"></div>
        }
    </div>
}
<fieldset class="address-editor" id="@guid">
    <legend>@addressTypeTitle</legend>
    @* Personal information *@
    <div class="row">
        @EditorForString(m => m.Honorific,
            T("Title"),
            T("Title or honorific, e.g. Mr., Mrs., Dr., San, etc."),
            placeholder: T("Title"))
        @EditorForString(m => m.FirstName,
            T("First Name"),
            T("Please include middle name or initial as appropriate."),
            required: true,
            placeholder: T("First Name"))
        @EditorForString(m => m.LastName,
            T("Last Name"),
            T("Please include middle name or initial as appropriate."),
            required: true,
            placeholder: T("Last Name"))
        @EditorForString(m => m.Company,
            T("Company"),
            T("Please include company name if relevant."),
            placeholder: T("Company"))
    </div>
    @* 1. Country *@
    @*    This must be selected among the countries configured *@
    <div class="row">
        <div class="address-input address-text-input address-country"
             title="@T("Select a valid country from the list.")">
            @Html.LabelFor(m => m.CountryId, T("Country").Text, new { @class = "required" })
            @Html.DropDownListFor(m => m.CountryId,
                Model.Countries)
            <div class="hint"></div>
        </div>
    </div>
    <div class="row">
        @* 2. City *@
        <div class="address-input address-text-input address-city"
             title="@T("Select a city from the list.")">
            @Html.HiddenFor(m => m.CityId)
            @Html.LabelFor(m => m.City, T("City").Text, new { @class = "required" })
            @if (Model.CityId >= 0) {
                <select id="@Html.FieldIdFor(m => m.City)"
                        class="required address-input"
                        name="@Html.NameFor(m => m.City)"></select>
            } else {
                <input id="@Html.FieldIdFor(m => m.City)"
                       class="required address-input"
                       name="@Html.NameFor(m => m.City)" type="text"
                       value="@Model.City"
                       placeholder="@T("City")" />
            }
            <div class="hint"></div>
        </div>
        @* 3. Province and ZIP code *@
        <div class="address-input address-text-input address-province"
             title="@T("Please specify the state, province, prefecture, republic or region code as appropriate. For example, 'WA' for the state of Washington in the United States.")">
            @Html.HiddenFor(m => m.ProvinceId)
            @Html.LabelFor(m => m.Province, T("Province").Text, new { @class = "required" })
            @if (Model.ProvinceId >= 0) {
                <select id="@Html.FieldIdFor(m => m.Province)"
                        class="required address-input"
                        name="@Html.NameFor(m => m.Province)"></select>
            } else {
                <input id="@Html.FieldIdFor(m => m.Province)"
                       class="required address-input"
                       name="@Html.NameFor(m => m.Province)" type="text"
                       value="@Model.Province"
                       placeholder="@T("Province or state")" />
            }
            <div class="hint"></div>
        </div>
        @EditorForString(m => m.PostalCode,
            T("Postal or ZIP code"))
        @* 4. Street *@
        <div class="address-input address-text-input">
            @Html.LabelFor(m => m.Address1, T("Address").Text, new { @class = "required" })
            @EditorForString(m => m.Address1, placeholder: T("Address"))
            @EditorForString(m => m.Address2, placeholder: T("Address"))
        </div>
    </div>
</fieldset>

@using (Script.Foot()) {
<script type="text/javascript">
        $(document).ready(function () {
            // configure the script that will dynamically load configured address settings
            $('#@guid').addressConfiguration({
                // set all instance specific information here
                // e.g. urls for ajax calls and the jquery selectors
                // for the different elements of the address
                countriesInput: '#@Html.FieldIdFor(m => m.CountryId)',
                citiesInput: '#@Html.FieldIdFor(m => m.City)',
                cityId: '#@Html.FieldIdFor(m => m.CityId)',
                provincesInput: '#@Html.FieldIdFor(m => m.Province)',
                provinceId: '#@Html.FieldIdFor(m => m.ProvinceId)',
                getCities: {
                    url: '@Url.Action("GetCities", "Addresses", new { area = "Laser.Orchard.NwazetIntegration" })'
                },
                getProvinces: {
                    url: '@Url.Action("GetProvinces", "Addresses", new { area = "Laser.Orchard.NwazetIntegration" })'
                },
                @if (!string.IsNullOrWhiteSpace(otherPrefix)) {
                    <text>
                    onChangeCity: function () {
                        if ($(this).is('select')) {
                            $('#@(fullPrefix + "City")')
                                .val($(this).find('option:selected').text());
                        } else {
                            $('#@(fullPrefix + "City")')
                                .val($(this).val());
                        }
                    },
                    onChangeProvince: function () {
                        if ($(this).is('select')) {
                            $('#@(fullPrefix + "Province")')
                                .val($(this).find('option:selected').text());
                        } else {
                            $('#@(fullPrefix + "Province")')
                                .val($(this).val());
                        }
                    },
                    onCountryChange: function () {
                        $('#@(fullPrefix + "Country")')
                            .val($(this).find('option:selected').text());
                    },
                    </text>
                }

            });
        });
</script>
}
@* Use this for the properties that don't have advanced handling *@
@helper BasicChangeHandler(
    Expression<Func<AddressEditViewModel, string>> property, string stub) {
    <text>
        $('#@Html.FieldIdFor(property)').on('change', function() {
        $('#@(fullPrefix + stub)')
        .val($(this).val());
        });
    </text>
}
@if (!string.IsNullOrWhiteSpace(otherElementSelector) && !string.IsNullOrWhiteSpace(otherPrefix)) {
    // this part handles hiding and updating the stuff for the "normal" OrderPart
    using (Script.Foot()) {
    <script type="text/javascript">
            $(document).ready(function () {
                // hide away the form that should not be used directly
                $('@otherElementSelector').hide();
                // set up handlers to propagate changes
                @BasicChangeHandler(m => m.Honorific, "Honorific")
                @BasicChangeHandler(m => m.FirstName, "FirstName")
                @BasicChangeHandler(m => m.LastName, "LastName")
                @BasicChangeHandler(m => m.Company, "Company")
                @BasicChangeHandler(m => m.PostalCode, "PostalCode")
                @BasicChangeHandler(m => m.Address1, "Address1")
                @BasicChangeHandler(m => m.Address2, "Address2")
                @* The fields that are handled by the js library also propagate
                    their changes through it *@
            });
    </script>
    }
}