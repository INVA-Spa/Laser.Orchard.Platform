@using Laser.Orchard.NwazetIntegration.ViewModels;
@using Orchard.Localization;
@using System.Linq.Expressions;
@using Laser.Orchard.NwazetIntegration.Models;

@model AddressEditViewModel

@{
    Script.Require("NwazetIntegration.AddressConfiguration").AtFoot();

    List<SelectListItem> AddressTypeLocalize = new List<SelectListItem>();
    AddressTypeLocalize.Add(new SelectListItem() { Text = T("Billing Address").Text, Value = AddressRecordType.BillingAddress.ToString() });
    AddressTypeLocalize.Add(new SelectListItem() { Text = T("Shipping Address").Text, Value = AddressRecordType.ShippingAddress.ToString() });

    var guid = Guid.NewGuid().ToString();
}

@helper EditorForString(
    Expression<Func<AddressEditViewModel, string>> property,
    LocalizedString label,
    LocalizedString hint = null,
    bool required = false) {
    <div class="address-input address-text-input">
        @Html.LabelFor(property, label.Text, new { @class = required ? "" : "required" })
        @Html.EditorFor(property)
        @if (hint != null) {
            <div class="hint">@hint</div>
        }
    </div>
}
@*This should generally be put in a form*@
    <div class="address-editor" id="@guid">
        <div class="address-input">
            @Html.LabelFor(m => m.AddressType, T("Address Type").Text, new { })
            @Html.DropDownListFor(m => m.AddressType, AddressTypeLocalize)
        </div>
        @* Personal information *@
        @EditorForString(m => m.Honorific,
            T("Title"),
            T("Title or honorific, e.g. Mr., Mrs., Dr., San, etc."))
        @EditorForString(m => m.FirstName,
            T("First Name"),
            T("Please include middle name or initial as appropriate."),
            true)
        @EditorForString(m => m.LastName,
            T("Last Name"),
            T("Please include middle name or initial as appropriate."),
            true)
        @EditorForString(m => m.Company,
            T("Company"))
        @* 1. Country *@
        @*    This must be selected among the countries configured *@
        <div class="address-input address-text-input address-country">
            @Html.LabelFor(m => m.CountryId, T("Country").Text, new { @class = "required" })
            @Html.DropDownListFor(m => m.CountryId,
                Model.Countries)
            <div class="hint">@T("Select a valid country from the list.")</div>
        </div>
        @* 2. City *@
        <div class="address-input address-text-input address-city">
            @Html.HiddenFor(m => m.CityId)
            @Html.LabelFor(m => m.City, T("City").Text, new { @class = "required" })
            @if (Model.CityId >= 0) {
                <select id="@Html.FieldIdFor(m => m.City)"
                        class="required address-input"
                        name="@Html.NameFor(m => m.City)"></select>
            } else {
                <input id="@Html.FieldIdFor(m => m.City)"
                       class="required address-input"
                       name="@Html.NameFor(m => m.City)" type="text"
                       value="@Model.City" />
            }
            <div class="hint">@T("Select a city from the list.")</div>
        </div>
        @* 3. Province and ZIP code *@
        <div class="address-input address-text-input address-province">
            @Html.HiddenFor(m => m.ProvinceId)
            @Html.LabelFor(m => m.Province, T("Province").Text, new { @class = "required" })
            @if (Model.ProvinceId >= 0) {
                <select id="@Html.FieldIdFor(m => m.Province)"
                        class="required address-input"
                        name="@Html.NameFor(m => m.Province)"></select>
            } else {
                <input id="@Html.FieldIdFor(m => m.Province)"
                       class="required address-input"
                       name="@Html.NameFor(m => m.Province)" type="text"
                       value="@Model.Province" />
            }
            <div class="hint">@T("Please specify the state, province, prefecture, republic or region code as appropriate. For example, 'WA' for the state of Washington in the United States.")</div>
        </div>
        @EditorForString(m => m.PostalCode,
            T("Postal or ZIP code"))
        @* 4. Street *@
        <div class="address-input address-text-input">
            @Html.LabelFor(m => m.Address1, T("Address").Text, new { @class = "required" })
            @Html.EditorFor(m => m.Address1)
            @Html.EditorFor(m => m.Address2)
        </div>
    </div>
@using(Script.Foot()) {
    <script type="text/javascript">
        $(document).ready(function () {
            // configure the script that will dynamically load configured address settings
            $('#@guid').addressConfiguration({
                // set all instance specific information here
                // e.g. urls for ajax calls and the jquery selectors
                // for the different elements of the address
                countriesInput: '#@Html.FieldIdFor(m => m.CountryId)',
                citiesInput: '#@Html.FieldIdFor(m => m.City)',
                cityId: '#@Html.FieldIdFor(m => m.CityId)',
                provincesInput: '#@Html.FieldIdFor(m => m.Province)',
                provinceId: '#@Html.FieldIdFor(m => m.ProvinceId)',
                getCities: {
                    url: '@Url.Action("GetCities", "Addresses", new { area = "Laser.Orchard.NwazetIntegration" })'
                },
                getProvinces: {
                    url: '@Url.Action("GetProvinces", "Addresses", new { area = "Laser.Orchard.NwazetIntegration" })'
                }
            });
        });
    </script>
}